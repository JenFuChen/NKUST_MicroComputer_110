                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.1 #6083 (Dec 17 2010) (MINGW32)
                              4 ; This file was generated Mon Dec 26 10:03:17 2022
                              5 ;--------------------------------------------------------
                              6 	.module clcd_ex
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _ASCII
                             13 	.globl _main
                             14 	.globl _ACC_7
                             15 	.globl _CY
                             16 	.globl _AC
                             17 	.globl _F0
                             18 	.globl _RS1
                             19 	.globl _RS0
                             20 	.globl _OV
                             21 	.globl _FL
                             22 	.globl _P
                             23 	.globl _PS
                             24 	.globl _PT1
                             25 	.globl _PX1
                             26 	.globl _PT0
                             27 	.globl _PX0
                             28 	.globl _RD
                             29 	.globl _WR
                             30 	.globl _T1
                             31 	.globl _T0
                             32 	.globl _INT1
                             33 	.globl _INT0
                             34 	.globl _TXD
                             35 	.globl _RXD
                             36 	.globl _P3_7
                             37 	.globl _P3_6
                             38 	.globl _P3_5
                             39 	.globl _P3_4
                             40 	.globl _P3_3
                             41 	.globl _P3_2
                             42 	.globl _P3_1
                             43 	.globl _P3_0
                             44 	.globl _EA
                             45 	.globl _ES
                             46 	.globl _ET1
                             47 	.globl _EX1
                             48 	.globl _ET0
                             49 	.globl _EX0
                             50 	.globl _P2_7
                             51 	.globl _P2_6
                             52 	.globl _P2_5
                             53 	.globl _P2_4
                             54 	.globl _P2_3
                             55 	.globl _P2_2
                             56 	.globl _P2_1
                             57 	.globl _P2_0
                             58 	.globl _SM0
                             59 	.globl _SM1
                             60 	.globl _SM2
                             61 	.globl _REN
                             62 	.globl _TB8
                             63 	.globl _RB8
                             64 	.globl _TI
                             65 	.globl _RI
                             66 	.globl _P1_7
                             67 	.globl _P1_6
                             68 	.globl _P1_5
                             69 	.globl _P1_4
                             70 	.globl _P1_3
                             71 	.globl _P1_2
                             72 	.globl _P1_1
                             73 	.globl _P1_0
                             74 	.globl _TF1
                             75 	.globl _TR1
                             76 	.globl _TF0
                             77 	.globl _TR0
                             78 	.globl _IE1
                             79 	.globl _IT1
                             80 	.globl _IE0
                             81 	.globl _IT0
                             82 	.globl _P0_7
                             83 	.globl _P0_6
                             84 	.globl _P0_5
                             85 	.globl _P0_4
                             86 	.globl _P0_3
                             87 	.globl _P0_2
                             88 	.globl _P0_1
                             89 	.globl _P0_0
                             90 	.globl _B
                             91 	.globl _A
                             92 	.globl _ACC
                             93 	.globl _PSW
                             94 	.globl _IP
                             95 	.globl _P3
                             96 	.globl _IE
                             97 	.globl _P2
                             98 	.globl _SBUF
                             99 	.globl _SCON
                            100 	.globl _P1
                            101 	.globl _TH1
                            102 	.globl _TH0
                            103 	.globl _TL1
                            104 	.globl _TL0
                            105 	.globl _TMOD
                            106 	.globl _TCON
                            107 	.globl _PCON
                            108 	.globl _DPH
                            109 	.globl _DPL
                            110 	.globl _SP
                            111 	.globl _P0
                            112 	.globl _clcd_initialize
                            113 	.globl _clcd_write_instruction
                            114 	.globl _clcd_wait
                            115 	.globl _clcd_cls
                            116 	.globl _clcd_set_cursor
                            117 	.globl _clcd_put_char
                            118 	.globl _clcd_put_string
                            119 	.globl _clcd_put_byte
                            120 	.globl _clcd_put_word
                            121 	.globl _i2s
                            122 	.globl _clcd_put_integer
                            123 ;--------------------------------------------------------
                            124 ; special function registers
                            125 ;--------------------------------------------------------
                            126 	.area RSEG    (ABS,DATA)
   0000                     127 	.org 0x0000
                    0080    128 _P0	=	0x0080
                    0081    129 _SP	=	0x0081
                    0082    130 _DPL	=	0x0082
                    0083    131 _DPH	=	0x0083
                    0087    132 _PCON	=	0x0087
                    0088    133 _TCON	=	0x0088
                    0089    134 _TMOD	=	0x0089
                    008A    135 _TL0	=	0x008a
                    008B    136 _TL1	=	0x008b
                    008C    137 _TH0	=	0x008c
                    008D    138 _TH1	=	0x008d
                    0090    139 _P1	=	0x0090
                    0098    140 _SCON	=	0x0098
                    0099    141 _SBUF	=	0x0099
                    00A0    142 _P2	=	0x00a0
                    00A8    143 _IE	=	0x00a8
                    00B0    144 _P3	=	0x00b0
                    00B8    145 _IP	=	0x00b8
                    00D0    146 _PSW	=	0x00d0
                    00E0    147 _ACC	=	0x00e0
                    00E0    148 _A	=	0x00e0
                    00F0    149 _B	=	0x00f0
                            150 ;--------------------------------------------------------
                            151 ; special function bits
                            152 ;--------------------------------------------------------
                            153 	.area RSEG    (ABS,DATA)
   0000                     154 	.org 0x0000
                    0080    155 _P0_0	=	0x0080
                    0081    156 _P0_1	=	0x0081
                    0082    157 _P0_2	=	0x0082
                    0083    158 _P0_3	=	0x0083
                    0084    159 _P0_4	=	0x0084
                    0085    160 _P0_5	=	0x0085
                    0086    161 _P0_6	=	0x0086
                    0087    162 _P0_7	=	0x0087
                    0088    163 _IT0	=	0x0088
                    0089    164 _IE0	=	0x0089
                    008A    165 _IT1	=	0x008a
                    008B    166 _IE1	=	0x008b
                    008C    167 _TR0	=	0x008c
                    008D    168 _TF0	=	0x008d
                    008E    169 _TR1	=	0x008e
                    008F    170 _TF1	=	0x008f
                    0090    171 _P1_0	=	0x0090
                    0091    172 _P1_1	=	0x0091
                    0092    173 _P1_2	=	0x0092
                    0093    174 _P1_3	=	0x0093
                    0094    175 _P1_4	=	0x0094
                    0095    176 _P1_5	=	0x0095
                    0096    177 _P1_6	=	0x0096
                    0097    178 _P1_7	=	0x0097
                    0098    179 _RI	=	0x0098
                    0099    180 _TI	=	0x0099
                    009A    181 _RB8	=	0x009a
                    009B    182 _TB8	=	0x009b
                    009C    183 _REN	=	0x009c
                    009D    184 _SM2	=	0x009d
                    009E    185 _SM1	=	0x009e
                    009F    186 _SM0	=	0x009f
                    00A0    187 _P2_0	=	0x00a0
                    00A1    188 _P2_1	=	0x00a1
                    00A2    189 _P2_2	=	0x00a2
                    00A3    190 _P2_3	=	0x00a3
                    00A4    191 _P2_4	=	0x00a4
                    00A5    192 _P2_5	=	0x00a5
                    00A6    193 _P2_6	=	0x00a6
                    00A7    194 _P2_7	=	0x00a7
                    00A8    195 _EX0	=	0x00a8
                    00A9    196 _ET0	=	0x00a9
                    00AA    197 _EX1	=	0x00aa
                    00AB    198 _ET1	=	0x00ab
                    00AC    199 _ES	=	0x00ac
                    00AF    200 _EA	=	0x00af
                    00B0    201 _P3_0	=	0x00b0
                    00B1    202 _P3_1	=	0x00b1
                    00B2    203 _P3_2	=	0x00b2
                    00B3    204 _P3_3	=	0x00b3
                    00B4    205 _P3_4	=	0x00b4
                    00B5    206 _P3_5	=	0x00b5
                    00B6    207 _P3_6	=	0x00b6
                    00B7    208 _P3_7	=	0x00b7
                    00B0    209 _RXD	=	0x00b0
                    00B1    210 _TXD	=	0x00b1
                    00B2    211 _INT0	=	0x00b2
                    00B3    212 _INT1	=	0x00b3
                    00B4    213 _T0	=	0x00b4
                    00B5    214 _T1	=	0x00b5
                    00B6    215 _WR	=	0x00b6
                    00B7    216 _RD	=	0x00b7
                    00B8    217 _PX0	=	0x00b8
                    00B9    218 _PT0	=	0x00b9
                    00BA    219 _PX1	=	0x00ba
                    00BB    220 _PT1	=	0x00bb
                    00BC    221 _PS	=	0x00bc
                    00D0    222 _P	=	0x00d0
                    00D1    223 _FL	=	0x00d1
                    00D2    224 _OV	=	0x00d2
                    00D3    225 _RS0	=	0x00d3
                    00D4    226 _RS1	=	0x00d4
                    00D5    227 _F0	=	0x00d5
                    00D6    228 _AC	=	0x00d6
                    00D7    229 _CY	=	0x00d7
                    00E7    230 _ACC_7	=	0x00e7
                            231 ;--------------------------------------------------------
                            232 ; overlayable register banks
                            233 ;--------------------------------------------------------
                            234 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     235 	.ds 8
                            236 ;--------------------------------------------------------
                            237 ; internal ram data
                            238 ;--------------------------------------------------------
                            239 	.area DSEG    (DATA)
                            240 ;--------------------------------------------------------
                            241 ; overlayable items in internal ram 
                            242 ;--------------------------------------------------------
                            243 	.area OSEG    (OVR,DATA)
                            244 ;--------------------------------------------------------
                            245 ; Stack segment in internal ram 
                            246 ;--------------------------------------------------------
                            247 	.area	SSEG	(DATA)
   0000                     248 __start__stack:
   0000                     249 	.ds	1
                            250 
                            251 ;--------------------------------------------------------
                            252 ; indirectly addressable internal ram data
                            253 ;--------------------------------------------------------
                            254 	.area ISEG    (DATA)
                            255 ;--------------------------------------------------------
                            256 ; absolute internal ram data
                            257 ;--------------------------------------------------------
                            258 	.area IABS    (ABS,DATA)
                            259 	.area IABS    (ABS,DATA)
                            260 ;--------------------------------------------------------
                            261 ; bit data
                            262 ;--------------------------------------------------------
                            263 	.area BSEG    (BIT)
                            264 ;--------------------------------------------------------
                            265 ; paged external ram data
                            266 ;--------------------------------------------------------
                            267 	.area PSEG    (PAG,XDATA)
                            268 ;--------------------------------------------------------
                            269 ; external ram data
                            270 ;--------------------------------------------------------
                            271 	.area XSEG    (XDATA)
                            272 ;--------------------------------------------------------
                            273 ; absolute external ram data
                            274 ;--------------------------------------------------------
                            275 	.area XABS    (ABS,XDATA)
                            276 ;--------------------------------------------------------
                            277 ; external initialized ram data
                            278 ;--------------------------------------------------------
                            279 	.area XISEG   (XDATA)
                            280 	.area HOME    (CODE)
                            281 	.area GSINIT0 (CODE)
                            282 	.area GSINIT1 (CODE)
                            283 	.area GSINIT2 (CODE)
                            284 	.area GSINIT3 (CODE)
                            285 	.area GSINIT4 (CODE)
                            286 	.area GSINIT5 (CODE)
                            287 	.area GSINIT  (CODE)
                            288 	.area GSFINAL (CODE)
                            289 	.area CSEG    (CODE)
                            290 ;--------------------------------------------------------
                            291 ; interrupt vector 
                            292 ;--------------------------------------------------------
                            293 	.area HOME    (CODE)
   0000                     294 __interrupt_vect:
   0000 02s00r00            295 	ljmp	__sdcc_gsinit_startup
                            296 ;--------------------------------------------------------
                            297 ; global & static initialisations
                            298 ;--------------------------------------------------------
                            299 	.area HOME    (CODE)
                            300 	.area GSINIT  (CODE)
                            301 	.area GSFINAL (CODE)
                            302 	.area GSINIT  (CODE)
                            303 	.globl __sdcc_gsinit_startup
                            304 	.globl __sdcc_program_startup
                            305 	.globl __start__stack
                            306 	.globl __mcs51_genXINIT
                            307 	.globl __mcs51_genXRAMCLEAR
                            308 	.globl __mcs51_genRAMCLEAR
                            309 	.area GSFINAL (CODE)
   0000 02s00r03            310 	ljmp	__sdcc_program_startup
                            311 ;--------------------------------------------------------
                            312 ; Home
                            313 ;--------------------------------------------------------
                            314 	.area HOME    (CODE)
                            315 	.area HOME    (CODE)
   0003                     316 __sdcc_program_startup:
   0003 12s02rFD            317 	lcall	_main
                            318 ;	return from main will lock up
   0006 80 FE               319 	sjmp .
                            320 ;--------------------------------------------------------
                            321 ; code
                            322 ;--------------------------------------------------------
                            323 	.area CSEG    (CODE)
                            324 ;------------------------------------------------------------
                            325 ;Allocation info for local variables in function 'clcd_initialize'
                            326 ;------------------------------------------------------------
                            327 ;------------------------------------------------------------
                            328 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:26: void clcd_initialize(void)
                            329 ;	-----------------------------------------
                            330 ;	 function clcd_initialize
                            331 ;	-----------------------------------------
   0000                     332 _clcd_initialize:
                    0002    333 	ar2 = 0x02
                    0003    334 	ar3 = 0x03
                    0004    335 	ar4 = 0x04
                    0005    336 	ar5 = 0x05
                    0006    337 	ar6 = 0x06
                    0007    338 	ar7 = 0x07
                    0000    339 	ar0 = 0x00
                    0001    340 	ar1 = 0x01
                            341 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:28: clcd_write_instruction(0x38);		// 8-bit interface, 2 lines, 5x7 dots
   0000 75 82 38            342 	mov	dpl,#0x38
   0003 12s00r18            343 	lcall	_clcd_write_instruction
                            344 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:29: clcd_write_instruction(0x0F);		// display on, cursor on, cursor blinking
   0006 75 82 0F            345 	mov	dpl,#0x0F
   0009 12s00r18            346 	lcall	_clcd_write_instruction
                            347 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:30: clcd_write_instruction(0x06);		// move cursor right when read/write
   000C 75 82 06            348 	mov	dpl,#0x06
   000F 12s00r18            349 	lcall	_clcd_write_instruction
                            350 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:31: clcd_write_instruction(0x01);		// clear display, cursor home
   0012 75 82 01            351 	mov	dpl,#0x01
   0015 02s00r18            352 	ljmp	_clcd_write_instruction
                            353 ;------------------------------------------------------------
                            354 ;Allocation info for local variables in function 'clcd_write_instruction'
                            355 ;------------------------------------------------------------
                            356 ;instruction               Allocated to registers r2 
                            357 ;------------------------------------------------------------
                            358 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:34: void clcd_write_instruction(unsigned char instruction)
                            359 ;	-----------------------------------------
                            360 ;	 function clcd_write_instruction
                            361 ;	-----------------------------------------
   0018                     362 _clcd_write_instruction:
   0018 AA 82               363 	mov	r2,dpl
                            364 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:36: clcd_wait();
   001A C0 02               365 	push	ar2
   001C 12s00r2C            366 	lcall	_clcd_wait
   001F D0 02               367 	pop	ar2
                            368 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:37: CLCD_RS=0;CLCD_RW=0;
   0021 C2 A0               369 	clr	_P2_0
   0023 C2 A1               370 	clr	_P2_1
                            371 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:38: CLCD_DB=instruction;CLCD_E=1;CLCD_E=0;
   0025 8A 90               372 	mov	_P1,r2
   0027 D2 A2               373 	setb	_P2_2
   0029 C2 A2               374 	clr	_P2_2
   002B 22                  375 	ret
                            376 ;------------------------------------------------------------
                            377 ;Allocation info for local variables in function 'clcd_wait'
                            378 ;------------------------------------------------------------
                            379 ;------------------------------------------------------------
                            380 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:41: void clcd_wait(void)
                            381 ;	-----------------------------------------
                            382 ;	 function clcd_wait
                            383 ;	-----------------------------------------
   002C                     384 _clcd_wait:
                            385 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:43: CLCD_DB=0xFF;
   002C 75 90 FF            386 	mov	_P1,#0xFF
                            387 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:44: CLCD_RS=0;CLCD_RW=1;
   002F C2 A0               388 	clr	_P2_0
   0031 D2 A1               389 	setb	_P2_1
                            390 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:45: do
   0033                     391 00101$:
                            392 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:47: CLCD_E=1;ACC=CLCD_DB;CLCD_E=0;
   0033 D2 A2               393 	setb	_P2_2
   0035 85 90 E0            394 	mov	_ACC,_P1
   0038 C2 A2               395 	clr	_P2_2
   003A 20 E7 F6            396 	jb	_ACC_7,00101$
   003D 22                  397 	ret
                            398 ;------------------------------------------------------------
                            399 ;Allocation info for local variables in function 'clcd_cls'
                            400 ;------------------------------------------------------------
                            401 ;------------------------------------------------------------
                            402 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:52: void clcd_cls(void)
                            403 ;	-----------------------------------------
                            404 ;	 function clcd_cls
                            405 ;	-----------------------------------------
   003E                     406 _clcd_cls:
                            407 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:54: clcd_write_instruction(0x01);
   003E 75 82 01            408 	mov	dpl,#0x01
   0041 02s00r18            409 	ljmp	_clcd_write_instruction
                            410 ;------------------------------------------------------------
                            411 ;Allocation info for local variables in function 'clcd_set_cursor'
                            412 ;------------------------------------------------------------
                            413 ;column                    Allocated to stack - offset -4
                            414 ;row                       Allocated to registers r2 r3 
                            415 ;instruction               Allocated to registers r4 r5 
                            416 ;------------------------------------------------------------
                            417 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:57: void clcd_set_cursor(unsigned int row,unsigned int column)
                            418 ;	-----------------------------------------
                            419 ;	 function clcd_set_cursor
                            420 ;	-----------------------------------------
   0044                     421 _clcd_set_cursor:
   0044 C0*00               422 	push	_bp
   0046 85 81*00            423 	mov	_bp,sp
   0049 AA 82               424 	mov	r2,dpl
   004B AB 83               425 	mov	r3,dph
                            426 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:59: unsigned int instruction=0x80;
   004D 7C 80               427 	mov	r4,#0x80
   004F 7D 00               428 	mov	r5,#0x00
                            429 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:60: if(row==1)instruction+=0x40;
   0051 BA 01 07            430 	cjne	r2,#0x01,00102$
   0054 BB 00 04            431 	cjne	r3,#0x00,00102$
   0057 7C C0               432 	mov	r4,#0xC0
   0059 7D 00               433 	mov	r5,#0x00
   005B                     434 00102$:
                            435 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:61: instruction+=column;
   005B E5*00               436 	mov	a,_bp
   005D 24 FC               437 	add	a,#0xfc
   005F F8                  438 	mov	r0,a
   0060 E6                  439 	mov	a,@r0
   0061 2C                  440 	add	a,r4
   0062 FC                  441 	mov	r4,a
   0063 08                  442 	inc	r0
   0064 E6                  443 	mov	a,@r0
   0065 3D                  444 	addc	a,r5
                            445 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:62: clcd_write_instruction(instruction);
   0066 8C 82               446 	mov	dpl,r4
   0068 12s00r18            447 	lcall	_clcd_write_instruction
   006B D0*00               448 	pop	_bp
   006D 22                  449 	ret
                            450 ;------------------------------------------------------------
                            451 ;Allocation info for local variables in function 'clcd_put_char'
                            452 ;------------------------------------------------------------
                            453 ;c                         Allocated to registers r2 
                            454 ;------------------------------------------------------------
                            455 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:65: void clcd_put_char(char c)
                            456 ;	-----------------------------------------
                            457 ;	 function clcd_put_char
                            458 ;	-----------------------------------------
   006E                     459 _clcd_put_char:
   006E AA 82               460 	mov	r2,dpl
                            461 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:67: clcd_wait();
   0070 C0 02               462 	push	ar2
   0072 12s00r2C            463 	lcall	_clcd_wait
   0075 D0 02               464 	pop	ar2
                            465 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:68: CLCD_RS=1;CLCD_RW=0;
   0077 D2 A0               466 	setb	_P2_0
   0079 C2 A1               467 	clr	_P2_1
                            468 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:69: CLCD_DB=c;CLCD_E=1;CLCD_E=0;
   007B 8A 90               469 	mov	_P1,r2
   007D D2 A2               470 	setb	_P2_2
   007F C2 A2               471 	clr	_P2_2
   0081 22                  472 	ret
                            473 ;------------------------------------------------------------
                            474 ;Allocation info for local variables in function 'clcd_put_string'
                            475 ;------------------------------------------------------------
                            476 ;s                         Allocated to registers r2 r3 r4 
                            477 ;------------------------------------------------------------
                            478 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:72: void clcd_put_string(char *s)
                            479 ;	-----------------------------------------
                            480 ;	 function clcd_put_string
                            481 ;	-----------------------------------------
   0082                     482 _clcd_put_string:
   0082 AA 82               483 	mov	r2,dpl
   0084 AB 83               484 	mov	r3,dph
   0086 AC F0               485 	mov	r4,b
                            486 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:74: while(*s!=0){clcd_put_char(*s);s++;}
   0088                     487 00101$:
   0088 8A 82               488 	mov	dpl,r2
   008A 8B 83               489 	mov	dph,r3
   008C 8C F0               490 	mov	b,r4
   008E 12s00r00            491 	lcall	__gptrget
   0091 FD                  492 	mov	r5,a
   0092 60 18               493 	jz	00104$
   0094 8D 82               494 	mov	dpl,r5
   0096 C0 02               495 	push	ar2
   0098 C0 03               496 	push	ar3
   009A C0 04               497 	push	ar4
   009C 12s00r6E            498 	lcall	_clcd_put_char
   009F D0 04               499 	pop	ar4
   00A1 D0 03               500 	pop	ar3
   00A3 D0 02               501 	pop	ar2
   00A5 0A                  502 	inc	r2
   00A6 BA 00 DF            503 	cjne	r2,#0x00,00101$
   00A9 0B                  504 	inc	r3
   00AA 80 DC               505 	sjmp	00101$
   00AC                     506 00104$:
   00AC 22                  507 	ret
                            508 ;------------------------------------------------------------
                            509 ;Allocation info for local variables in function 'clcd_put_byte'
                            510 ;------------------------------------------------------------
                            511 ;byte_data                 Allocated to registers r2 
                            512 ;------------------------------------------------------------
                            513 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:77: void clcd_put_byte(unsigned char byte_data)
                            514 ;	-----------------------------------------
                            515 ;	 function clcd_put_byte
                            516 ;	-----------------------------------------
   00AD                     517 _clcd_put_byte:
                            518 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:79: clcd_put_char(ASCII[byte_data/16]);clcd_put_char(ASCII[byte_data%16]);
   00AD E5 82               519 	mov	a,dpl
   00AF FA                  520 	mov	r2,a
   00B0 C4                  521 	swap	a
   00B1 54 0F               522 	anl	a,#0x0f
   00B3 90s00r00            523 	mov	dptr,#_ASCII
   00B6 93                  524 	movc	a,@a+dptr
   00B7 F5 82               525 	mov	dpl,a
   00B9 C0 02               526 	push	ar2
   00BB 12s00r6E            527 	lcall	_clcd_put_char
   00BE D0 02               528 	pop	ar2
   00C0 74 0F               529 	mov	a,#0x0F
   00C2 5A                  530 	anl	a,r2
   00C3 90s00r00            531 	mov	dptr,#_ASCII
   00C6 93                  532 	movc	a,@a+dptr
   00C7 F5 82               533 	mov	dpl,a
   00C9 02s00r6E            534 	ljmp	_clcd_put_char
                            535 ;------------------------------------------------------------
                            536 ;Allocation info for local variables in function 'clcd_put_word'
                            537 ;------------------------------------------------------------
                            538 ;word_data                 Allocated to registers r2 r3 
                            539 ;------------------------------------------------------------
                            540 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:82: void clcd_put_word(unsigned int word_data)
                            541 ;	-----------------------------------------
                            542 ;	 function clcd_put_word
                            543 ;	-----------------------------------------
   00CC                     544 _clcd_put_word:
   00CC AA 82               545 	mov	r2,dpl
   00CE AB 83               546 	mov	r3,dph
                            547 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:84: clcd_put_byte(word_data/256);clcd_put_byte(word_data%256);
   00D0 8B 04               548 	mov	ar4,r3
   00D2 8C 82               549 	mov	dpl,r4
   00D4 C0 02               550 	push	ar2
   00D6 C0 03               551 	push	ar3
   00D8 12s00rAD            552 	lcall	_clcd_put_byte
   00DB D0 03               553 	pop	ar3
   00DD D0 02               554 	pop	ar2
   00DF 8A 82               555 	mov	dpl,r2
   00E1 02s00rAD            556 	ljmp	_clcd_put_byte
                            557 ;------------------------------------------------------------
                            558 ;Allocation info for local variables in function 'i2s'
                            559 ;------------------------------------------------------------
                            560 ;s                         Allocated to stack - offset -5
                            561 ;i                         Allocated to stack - offset 1
                            562 ;sign                      Allocated to stack - offset 3
                            563 ;len                       Allocated to registers r6 
                            564 ;p                         Allocated to stack - offset 4
                            565 ;sloc0                     Allocated to stack - offset 8
                            566 ;sloc1                     Allocated to stack - offset 7
                            567 ;sloc2                     Allocated to stack - offset 8
                            568 ;------------------------------------------------------------
                            569 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:87: void i2s(int i,char *s)
                            570 ;	-----------------------------------------
                            571 ;	 function i2s
                            572 ;	-----------------------------------------
   00E4                     573 _i2s:
   00E4 C0*00               574 	push	_bp
   00E6 85 81*00            575 	mov	_bp,sp
   00E9 C0 82               576 	push	dpl
   00EB C0 83               577 	push	dph
   00ED E5 81               578 	mov	a,sp
   00EF 24 0A               579 	add	a,#0x0a
   00F1 F5 81               580 	mov	sp,a
                            581 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:90: sign='+';len=0;p=s;
   00F3 E5*00               582 	mov	a,_bp
   00F5 24 03               583 	add	a,#0x03
   00F7 F8                  584 	mov	r0,a
   00F8 76 2B               585 	mov	@r0,#0x2B
   00FA E5*00               586 	mov	a,_bp
   00FC 24 FB               587 	add	a,#0xfb
   00FE F8                  588 	mov	r0,a
   00FF E5*00               589 	mov	a,_bp
   0101 24 04               590 	add	a,#0x04
   0103 F9                  591 	mov	r1,a
   0104 E6                  592 	mov	a,@r0
   0105 F7                  593 	mov	@r1,a
   0106 08                  594 	inc	r0
   0107 09                  595 	inc	r1
   0108 E6                  596 	mov	a,@r0
   0109 F7                  597 	mov	@r1,a
   010A 08                  598 	inc	r0
   010B 09                  599 	inc	r1
   010C E6                  600 	mov	a,@r0
   010D F7                  601 	mov	@r1,a
                            602 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:91: if(i<0){sign='-';i=-i;}
   010E A8*00               603 	mov	r0,_bp
   0110 08                  604 	inc	r0
   0111 08                  605 	inc	r0
   0112 E6                  606 	mov	a,@r0
   0113 30 E7 12            607 	jnb	acc.7,00115$
   0116 E5*00               608 	mov	a,_bp
   0118 24 03               609 	add	a,#0x03
   011A F8                  610 	mov	r0,a
   011B 76 2D               611 	mov	@r0,#0x2D
   011D A8*00               612 	mov	r0,_bp
   011F 08                  613 	inc	r0
   0120 C3                  614 	clr	c
   0121 E4                  615 	clr	a
   0122 96                  616 	subb	a,@r0
   0123 F6                  617 	mov	@r0,a
   0124 08                  618 	inc	r0
   0125 E4                  619 	clr	a
   0126 96                  620 	subb	a,@r0
   0127 F6                  621 	mov	@r0,a
                            622 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:92: do{*s=(i%10)+'0';s++;len++;i/=10;}while(i!=0);
   0128                     623 00115$:
   0128 E5*00               624 	mov	a,_bp
   012A 24 04               625 	add	a,#0x04
   012C F8                  626 	mov	r0,a
   012D 86 04               627 	mov	ar4,@r0
   012F 08                  628 	inc	r0
   0130 86 02               629 	mov	ar2,@r0
   0132 08                  630 	inc	r0
   0133 86 03               631 	mov	ar3,@r0
   0135 7D 00               632 	mov	r5,#0x00
   0137                     633 00103$:
   0137 C0 02               634 	push	ar2
   0139 C0 03               635 	push	ar3
   013B C0 04               636 	push	ar4
   013D C0 05               637 	push	ar5
   013F 74 0A               638 	mov	a,#0x0A
   0141 C0 E0               639 	push	acc
   0143 E4                  640 	clr	a
   0144 C0 E0               641 	push	acc
   0146 A8*00               642 	mov	r0,_bp
   0148 08                  643 	inc	r0
   0149 86 82               644 	mov	dpl,@r0
   014B 08                  645 	inc	r0
   014C 86 83               646 	mov	dph,@r0
   014E 12s00r00            647 	lcall	__modsint
   0151 AE 82               648 	mov	r6,dpl
   0153 15 81               649 	dec	sp
   0155 15 81               650 	dec	sp
   0157 D0 05               651 	pop	ar5
   0159 D0 04               652 	pop	ar4
   015B D0 03               653 	pop	ar3
   015D D0 02               654 	pop	ar2
   015F 74 30               655 	mov	a,#0x30
   0161 2E                  656 	add	a,r6
   0162 8C 82               657 	mov	dpl,r4
   0164 8A 83               658 	mov	dph,r2
   0166 8B F0               659 	mov	b,r3
   0168 12s00r00            660 	lcall	__gptrput
   016B A3                  661 	inc	dptr
   016C AC 82               662 	mov	r4,dpl
   016E AA 83               663 	mov	r2,dph
   0170 0D                  664 	inc	r5
   0171 8D 06               665 	mov	ar6,r5
   0173 C0 02               666 	push	ar2
   0175 C0 03               667 	push	ar3
   0177 C0 04               668 	push	ar4
   0179 C0 05               669 	push	ar5
   017B 74 0A               670 	mov	a,#0x0A
   017D C0 E0               671 	push	acc
   017F E4                  672 	clr	a
   0180 C0 E0               673 	push	acc
   0182 A8*00               674 	mov	r0,_bp
   0184 08                  675 	inc	r0
   0185 86 82               676 	mov	dpl,@r0
   0187 08                  677 	inc	r0
   0188 86 83               678 	mov	dph,@r0
   018A 12s00r00            679 	lcall	__divsint
   018D A8*00               680 	mov	r0,_bp
   018F 08                  681 	inc	r0
   0190 A6 82               682 	mov	@r0,dpl
   0192 08                  683 	inc	r0
   0193 A6 83               684 	mov	@r0,dph
   0195 15 81               685 	dec	sp
   0197 15 81               686 	dec	sp
   0199 D0 05               687 	pop	ar5
   019B D0 04               688 	pop	ar4
   019D D0 03               689 	pop	ar3
   019F D0 02               690 	pop	ar2
   01A1 A8*00               691 	mov	r0,_bp
   01A3 08                  692 	inc	r0
   01A4 E6                  693 	mov	a,@r0
   01A5 08                  694 	inc	r0
   01A6 46                  695 	orl	a,@r0
   01A7 70 8E               696 	jnz	00103$
                            697 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:93: if(sign=='-'){*s='-';s++;len++;}
   01A9 8D 06               698 	mov	ar6,r5
   01AB E5*00               699 	mov	a,_bp
   01AD 24 03               700 	add	a,#0x03
   01AF F8                  701 	mov	r0,a
   01B0 B6 2D 0E            702 	cjne	@r0,#0x2D,00119$
   01B3 8C 82               703 	mov	dpl,r4
   01B5 8A 83               704 	mov	dph,r2
   01B7 8B F0               705 	mov	b,r3
   01B9 74 2D               706 	mov	a,#0x2D
   01BB 12s00r00            707 	lcall	__gptrput
   01BE ED                  708 	mov	a,r5
   01BF 04                  709 	inc	a
   01C0 FE                  710 	mov	r6,a
                            711 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:94: for(i=0;i<len/2;i++){p[len]=p[i];p[i]=p[len-1-i];p[len-1-i]=p[len];}
   01C1                     712 00119$:
   01C1 EE                  713 	mov	a,r6
   01C2 C3                  714 	clr	c
   01C3 13                  715 	rrc	a
   01C4 FA                  716 	mov	r2,a
   01C5 A8*00               717 	mov	r0,_bp
   01C7 08                  718 	inc	r0
   01C8 E4                  719 	clr	a
   01C9 F6                  720 	mov	@r0,a
   01CA 08                  721 	inc	r0
   01CB F6                  722 	mov	@r0,a
   01CC                     723 00108$:
   01CC 8A 05               724 	mov	ar5,r2
   01CE 7F 00               725 	mov	r7,#0x00
   01D0 A8*00               726 	mov	r0,_bp
   01D2 08                  727 	inc	r0
   01D3 C3                  728 	clr	c
   01D4 E6                  729 	mov	a,@r0
   01D5 9D                  730 	subb	a,r5
   01D6 08                  731 	inc	r0
   01D7 E6                  732 	mov	a,@r0
   01D8 64 80               733 	xrl	a,#0x80
   01DA 8F F0               734 	mov	b,r7
   01DC 63 F0 80            735 	xrl	b,#0x80
   01DF 95 F0               736 	subb	a,b
   01E1 40 03               737 	jc	00126$
   01E3 02s02r9D            738 	ljmp	00111$
   01E6                     739 00126$:
   01E6 C0 02               740 	push	ar2
   01E8 E5*00               741 	mov	a,_bp
   01EA 24 04               742 	add	a,#0x04
   01EC F8                  743 	mov	r0,a
   01ED EE                  744 	mov	a,r6
   01EE 26                  745 	add	a,@r0
   01EF FB                  746 	mov	r3,a
   01F0 E4                  747 	clr	a
   01F1 08                  748 	inc	r0
   01F2 36                  749 	addc	a,@r0
   01F3 FC                  750 	mov	r4,a
   01F4 08                  751 	inc	r0
   01F5 86 05               752 	mov	ar5,@r0
   01F7 E5*00               753 	mov	a,_bp
   01F9 24 04               754 	add	a,#0x04
   01FB F8                  755 	mov	r0,a
   01FC A9*00               756 	mov	r1,_bp
   01FE 09                  757 	inc	r1
   01FF E7                  758 	mov	a,@r1
   0200 26                  759 	add	a,@r0
   0201 C0 E0               760 	push	acc
   0203 09                  761 	inc	r1
   0204 E7                  762 	mov	a,@r1
   0205 08                  763 	inc	r0
   0206 36                  764 	addc	a,@r0
   0207 C0 E0               765 	push	acc
   0209 08                  766 	inc	r0
   020A E6                  767 	mov	a,@r0
   020B C0 E0               768 	push	acc
   020D E5*00               769 	mov	a,_bp
   020F 24 0A               770 	add	a,#0x0a
   0211 F8                  771 	mov	r0,a
   0212 D0 E0               772 	pop	acc
   0214 F6                  773 	mov	@r0,a
   0215 18                  774 	dec	r0
   0216 D0 E0               775 	pop	acc
   0218 F6                  776 	mov	@r0,a
   0219 18                  777 	dec	r0
   021A D0 E0               778 	pop	acc
   021C F6                  779 	mov	@r0,a
   021D E5*00               780 	mov	a,_bp
   021F 24 08               781 	add	a,#0x08
   0221 F8                  782 	mov	r0,a
   0222 86 82               783 	mov	dpl,@r0
   0224 08                  784 	inc	r0
   0225 86 83               785 	mov	dph,@r0
   0227 08                  786 	inc	r0
   0228 86 F0               787 	mov	b,@r0
   022A E5*00               788 	mov	a,_bp
   022C 24 07               789 	add	a,#0x07
   022E F9                  790 	mov	r1,a
   022F 12s00r00            791 	lcall	__gptrget
   0232 F7                  792 	mov	@r1,a
   0233 8B 82               793 	mov	dpl,r3
   0235 8C 83               794 	mov	dph,r4
   0237 8D F0               795 	mov	b,r5
   0239 E5*00               796 	mov	a,_bp
   023B 24 07               797 	add	a,#0x07
   023D F8                  798 	mov	r0,a
   023E E6                  799 	mov	a,@r0
   023F 12s00r00            800 	lcall	__gptrput
   0242 8E 07               801 	mov	ar7,r6
   0244 7D 00               802 	mov	r5,#0x00
   0246 1F                  803 	dec	r7
   0247 BF FF 01            804 	cjne	r7,#0xff,00127$
   024A 1D                  805 	dec	r5
   024B                     806 00127$:
   024B A8*00               807 	mov	r0,_bp
   024D 08                  808 	inc	r0
   024E EF                  809 	mov	a,r7
   024F C3                  810 	clr	c
   0250 96                  811 	subb	a,@r0
   0251 FF                  812 	mov	r7,a
   0252 ED                  813 	mov	a,r5
   0253 08                  814 	inc	r0
   0254 96                  815 	subb	a,@r0
   0255 FD                  816 	mov	r5,a
   0256 E5*00               817 	mov	a,_bp
   0258 24 04               818 	add	a,#0x04
   025A F8                  819 	mov	r0,a
   025B EF                  820 	mov	a,r7
   025C 26                  821 	add	a,@r0
   025D FF                  822 	mov	r7,a
   025E ED                  823 	mov	a,r5
   025F 08                  824 	inc	r0
   0260 36                  825 	addc	a,@r0
   0261 FD                  826 	mov	r5,a
   0262 08                  827 	inc	r0
   0263 86 02               828 	mov	ar2,@r0
   0265 8F 82               829 	mov	dpl,r7
   0267 8D 83               830 	mov	dph,r5
   0269 8A F0               831 	mov	b,r2
   026B 12s00r00            832 	lcall	__gptrget
   026E FB                  833 	mov	r3,a
   026F E5*00               834 	mov	a,_bp
   0271 24 08               835 	add	a,#0x08
   0273 F8                  836 	mov	r0,a
   0274 86 82               837 	mov	dpl,@r0
   0276 08                  838 	inc	r0
   0277 86 83               839 	mov	dph,@r0
   0279 08                  840 	inc	r0
   027A 86 F0               841 	mov	b,@r0
   027C EB                  842 	mov	a,r3
   027D 12s00r00            843 	lcall	__gptrput
   0280 8F 82               844 	mov	dpl,r7
   0282 8D 83               845 	mov	dph,r5
   0284 8A F0               846 	mov	b,r2
   0286 E5*00               847 	mov	a,_bp
   0288 24 07               848 	add	a,#0x07
   028A F8                  849 	mov	r0,a
   028B E6                  850 	mov	a,@r0
   028C 12s00r00            851 	lcall	__gptrput
   028F A8*00               852 	mov	r0,_bp
   0291 08                  853 	inc	r0
   0292 06                  854 	inc	@r0
   0293 B6 00 02            855 	cjne	@r0,#0x00,00128$
   0296 08                  856 	inc	r0
   0297 06                  857 	inc	@r0
   0298                     858 00128$:
   0298 D0 02               859 	pop	ar2
   029A 02s01rCC            860 	ljmp	00108$
   029D                     861 00111$:
                            862 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:95: p[len]=0;
   029D E5*00               863 	mov	a,_bp
   029F 24 04               864 	add	a,#0x04
   02A1 F8                  865 	mov	r0,a
   02A2 EE                  866 	mov	a,r6
   02A3 26                  867 	add	a,@r0
   02A4 FE                  868 	mov	r6,a
   02A5 E4                  869 	clr	a
   02A6 08                  870 	inc	r0
   02A7 36                  871 	addc	a,@r0
   02A8 FA                  872 	mov	r2,a
   02A9 08                  873 	inc	r0
   02AA 86 03               874 	mov	ar3,@r0
   02AC 8E 82               875 	mov	dpl,r6
   02AE 8A 83               876 	mov	dph,r2
   02B0 8B F0               877 	mov	b,r3
   02B2 E4                  878 	clr	a
   02B3 12s00r00            879 	lcall	__gptrput
   02B6 85*00 81            880 	mov	sp,_bp
   02B9 D0*00               881 	pop	_bp
   02BB 22                  882 	ret
                            883 ;------------------------------------------------------------
                            884 ;Allocation info for local variables in function 'clcd_put_integer'
                            885 ;------------------------------------------------------------
                            886 ;i                         Allocated to registers r2 r3 
                            887 ;s                         Allocated to stack - offset 1
                            888 ;------------------------------------------------------------
                            889 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:98: void clcd_put_integer(int i)
                            890 ;	-----------------------------------------
                            891 ;	 function clcd_put_integer
                            892 ;	-----------------------------------------
   02BC                     893 _clcd_put_integer:
   02BC C0*00               894 	push	_bp
   02BE E5 81               895 	mov	a,sp
   02C0 F5*00               896 	mov	_bp,a
   02C2 24 07               897 	add	a,#0x07
   02C4 F5 81               898 	mov	sp,a
   02C6 AA 82               899 	mov	r2,dpl
   02C8 AB 83               900 	mov	r3,dph
                            901 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\/clcd.c:101: i2s(i,s);clcd_put_string(s);
   02CA AC*00               902 	mov	r4,_bp
   02CC 0C                  903 	inc	r4
   02CD 8C 05               904 	mov	ar5,r4
   02CF 7E 00               905 	mov	r6,#0x00
   02D1 7F 40               906 	mov	r7,#0x40
   02D3 C0 04               907 	push	ar4
   02D5 C0 05               908 	push	ar5
   02D7 C0 06               909 	push	ar6
   02D9 C0 07               910 	push	ar7
   02DB 8A 82               911 	mov	dpl,r2
   02DD 8B 83               912 	mov	dph,r3
   02DF 12s00rE4            913 	lcall	_i2s
   02E2 15 81               914 	dec	sp
   02E4 15 81               915 	dec	sp
   02E6 15 81               916 	dec	sp
   02E8 D0 04               917 	pop	ar4
   02EA 7A 00               918 	mov	r2,#0x00
   02EC 7B 40               919 	mov	r3,#0x40
   02EE 8C 82               920 	mov	dpl,r4
   02F0 8A 83               921 	mov	dph,r2
   02F2 8B F0               922 	mov	b,r3
   02F4 12s00r82            923 	lcall	_clcd_put_string
   02F7 85*00 81            924 	mov	sp,_bp
   02FA D0*00               925 	pop	_bp
   02FC 22                  926 	ret
                            927 ;------------------------------------------------------------
                            928 ;Allocation info for local variables in function 'main'
                            929 ;------------------------------------------------------------
                            930 ;i                         Allocated to registers r4 r5 
                            931 ;j                         Allocated to registers r3 
                            932 ;tmp                       Allocated to registers r4 
                            933 ;msg                       Allocated to stack - offset 1
                            934 ;------------------------------------------------------------
                            935 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:10: void main(void)
                            936 ;	-----------------------------------------
                            937 ;	 function main
                            938 ;	-----------------------------------------
   02FD                     939 _main:
   02FD C0*00               940 	push	_bp
   02FF E5 81               941 	mov	a,sp
   0301 F5*00               942 	mov	_bp,a
   0303 24 11               943 	add	a,#0x11
   0305 F5 81               944 	mov	sp,a
                            945 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:15: char msg[17]="Hello, 8051!    ";
   0307 A8*00               946 	mov	r0,_bp
   0309 08                  947 	inc	r0
   030A 76 48               948 	mov	@r0,#0x48
   030C E8                  949 	mov	a,r0
   030D 04                  950 	inc	a
   030E F9                  951 	mov	r1,a
   030F 77 65               952 	mov	@r1,#0x65
   0311 74 02               953 	mov	a,#0x02
   0313 28                  954 	add	a,r0
   0314 F9                  955 	mov	r1,a
   0315 77 6C               956 	mov	@r1,#0x6C
   0317 74 03               957 	mov	a,#0x03
   0319 28                  958 	add	a,r0
   031A F9                  959 	mov	r1,a
   031B 77 6C               960 	mov	@r1,#0x6C
   031D 74 04               961 	mov	a,#0x04
   031F 28                  962 	add	a,r0
   0320 F9                  963 	mov	r1,a
   0321 77 6F               964 	mov	@r1,#0x6F
   0323 74 05               965 	mov	a,#0x05
   0325 28                  966 	add	a,r0
   0326 F9                  967 	mov	r1,a
   0327 77 2C               968 	mov	@r1,#0x2C
   0329 74 06               969 	mov	a,#0x06
   032B 28                  970 	add	a,r0
   032C F9                  971 	mov	r1,a
   032D 77 20               972 	mov	@r1,#0x20
   032F 74 07               973 	mov	a,#0x07
   0331 28                  974 	add	a,r0
   0332 F9                  975 	mov	r1,a
   0333 77 38               976 	mov	@r1,#0x38
   0335 74 08               977 	mov	a,#0x08
   0337 28                  978 	add	a,r0
   0338 F9                  979 	mov	r1,a
   0339 77 30               980 	mov	@r1,#0x30
   033B 74 09               981 	mov	a,#0x09
   033D 28                  982 	add	a,r0
   033E F9                  983 	mov	r1,a
   033F 77 35               984 	mov	@r1,#0x35
   0341 74 0A               985 	mov	a,#0x0A
   0343 28                  986 	add	a,r0
   0344 F9                  987 	mov	r1,a
   0345 77 31               988 	mov	@r1,#0x31
   0347 74 0B               989 	mov	a,#0x0B
   0349 28                  990 	add	a,r0
   034A F9                  991 	mov	r1,a
   034B 77 21               992 	mov	@r1,#0x21
   034D 74 0C               993 	mov	a,#0x0C
   034F 28                  994 	add	a,r0
   0350 F9                  995 	mov	r1,a
   0351 77 20               996 	mov	@r1,#0x20
   0353 74 0D               997 	mov	a,#0x0D
   0355 28                  998 	add	a,r0
   0356 F9                  999 	mov	r1,a
   0357 77 20              1000 	mov	@r1,#0x20
   0359 74 0E              1001 	mov	a,#0x0E
   035B 28                 1002 	add	a,r0
   035C F9                 1003 	mov	r1,a
   035D 77 20              1004 	mov	@r1,#0x20
   035F 74 0F              1005 	mov	a,#0x0F
   0361 28                 1006 	add	a,r0
   0362 F9                 1007 	mov	r1,a
   0363 77 20              1008 	mov	@r1,#0x20
   0365 74 10              1009 	mov	a,#0x10
   0367 28                 1010 	add	a,r0
   0368 C0 00              1011 	push	ar0
   036A F8                 1012 	mov	r0,a
   036B 76 00              1013 	mov	@r0,#0x00
                           1014 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:16: clcd_initialize();
   036D C0 01              1015 	push	ar1
   036F 12s00r00           1016 	lcall	_clcd_initialize
                           1017 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:17: clcd_set_cursor(1,0);
   0372 E4                 1018 	clr	a
   0373 C0 E0              1019 	push	acc
   0375 C0 E0              1020 	push	acc
   0377 90 00 01           1021 	mov	dptr,#0x0001
   037A 12s00r44           1022 	lcall	_clcd_set_cursor
   037D 15 81              1023 	dec	sp
   037F 15 81              1024 	dec	sp
                           1025 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:18: clcd_put_string("Chin-Shiuh Shieh");
   0381 90s00r11           1026 	mov	dptr,#__str_1
   0384 75 F0 80           1027 	mov	b,#0x80
   0387 12s00r82           1028 	lcall	_clcd_put_string
   038A D0 01              1029 	pop	ar1
   038C D0 00              1030 	pop	ar0
                           1031 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:19: for(j=0;j<16;j++)
   038E 88 02              1032 	mov	ar2,r0
   0390 7B 00              1033 	mov	r3,#0x00
   0392                    1034 00111$:
   0392 BB 10 00           1035 	cjne	r3,#0x10,00127$
   0395                    1036 00127$:
   0395 40 03              1037 	jc	00128$
   0397 02s04r1B           1038 	ljmp	00114$
   039A                    1039 00128$:
                           1040 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:21: clcd_set_cursor(0,0);
   039A C0 02              1041 	push	ar2
   039C C0 03              1042 	push	ar3
   039E C0 00              1043 	push	ar0
   03A0 C0 01              1044 	push	ar1
   03A2 E4                 1045 	clr	a
   03A3 C0 E0              1046 	push	acc
   03A5 C0 E0              1047 	push	acc
   03A7 90 00 00           1048 	mov	dptr,#0x0000
   03AA 12s00r44           1049 	lcall	_clcd_set_cursor
   03AD 15 81              1050 	dec	sp
   03AF 15 81              1051 	dec	sp
   03B1 D0 01              1052 	pop	ar1
   03B3 D0 00              1053 	pop	ar0
   03B5 D0 03              1054 	pop	ar3
   03B7 D0 02              1055 	pop	ar2
                           1056 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:22: clcd_put_string(msg);
   03B9 8A 04              1057 	mov	ar4,r2
   03BB 7D 00              1058 	mov	r5,#0x00
   03BD 7E 40              1059 	mov	r6,#0x40
   03BF 8C 82              1060 	mov	dpl,r4
   03C1 8D 83              1061 	mov	dph,r5
   03C3 8E F0              1062 	mov	b,r6
   03C5 C0 02              1063 	push	ar2
   03C7 C0 03              1064 	push	ar3
   03C9 C0 00              1065 	push	ar0
   03CB C0 01              1066 	push	ar1
   03CD 12s00r82           1067 	lcall	_clcd_put_string
   03D0 D0 01              1068 	pop	ar1
   03D2 D0 00              1069 	pop	ar0
   03D4 D0 03              1070 	pop	ar3
   03D6 D0 02              1071 	pop	ar2
                           1072 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:23: for(i=-32768;i<32767;i++);
   03D8 7C FF              1073 	mov	r4,#0xFF
   03DA 7D FF              1074 	mov	r5,#0xFF
   03DC                    1075 00106$:
   03DC 1C                 1076 	dec	r4
   03DD BC FF 01           1077 	cjne	r4,#0xff,00129$
   03E0 1D                 1078 	dec	r5
   03E1                    1079 00129$:
   03E1 EC                 1080 	mov	a,r4
   03E2 4D                 1081 	orl	a,r5
                           1082 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:24: tmp=msg[0];
                           1083 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:25: for(i=1;i<16;i++)
   03E3 70 F7              1084 	jnz	00106$
   03E5 86 04              1085 	mov	ar4,@r0
   03E7 7D 01              1086 	mov	r5,#0x01
   03E9 FE                 1087 	mov	r6,a
   03EA                    1088 00107$:
   03EA C3                 1089 	clr	c
   03EB ED                 1090 	mov	a,r5
   03EC 94 10              1091 	subb	a,#0x10
   03EE EE                 1092 	mov	a,r6
   03EF 64 80              1093 	xrl	a,#0x80
   03F1 94 80              1094 	subb	a,#0x80
   03F3 50 20              1095 	jnc	00110$
                           1096 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:26: msg[i-1]=msg[i];
   03F5 C0 04              1097 	push	ar4
   03F7 8D 07              1098 	mov	ar7,r5
   03F9 EF                 1099 	mov	a,r7
   03FA 14                 1100 	dec	a
   03FB 28                 1101 	add	a,r0
   03FC FF                 1102 	mov	r7,a
   03FD ED                 1103 	mov	a,r5
   03FE 28                 1104 	add	a,r0
   03FF FC                 1105 	mov	r4,a
   0400 C0 00              1106 	push	ar0
   0402 A8 04              1107 	mov	r0,ar4
   0404 86 04              1108 	mov	ar4,@r0
   0406 A8 07              1109 	mov	r0,ar7
   0408 A6 04              1110 	mov	@r0,ar4
   040A D0 00              1111 	pop	ar0
                           1112 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:25: for(i=1;i<16;i++)
   040C 0D                 1113 	inc	r5
   040D BD 00 01           1114 	cjne	r5,#0x00,00132$
   0410 0E                 1115 	inc	r6
   0411                    1116 00132$:
   0411 D0 04              1117 	pop	ar4
   0413 80 D5              1118 	sjmp	00107$
   0415                    1119 00110$:
                           1120 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:27: msg[15]=tmp;
   0415 A7 04              1121 	mov	@r1,ar4
                           1122 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:19: for(j=0;j<16;j++)
   0417 0B                 1123 	inc	r3
   0418 02s03r92           1124 	ljmp	00111$
   041B                    1125 00114$:
                           1126 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:29: clcd_cls();
   041B C0 00              1127 	push	ar0
   041D 12s00r3E           1128 	lcall	_clcd_cls
                           1129 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:30: clcd_set_cursor(0,0);
   0420 E4                 1130 	clr	a
   0421 C0 E0              1131 	push	acc
   0423 C0 E0              1132 	push	acc
   0425 90 00 00           1133 	mov	dptr,#0x0000
   0428 12s00r44           1134 	lcall	_clcd_set_cursor
   042B 15 81              1135 	dec	sp
   042D 15 81              1136 	dec	sp
   042F D0 00              1137 	pop	ar0
                           1138 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:31: clcd_put_string(msg);
   0431 88 02              1139 	mov	ar2,r0
   0433 7B 00              1140 	mov	r3,#0x00
   0435 7C 40              1141 	mov	r4,#0x40
   0437 8A 82              1142 	mov	dpl,r2
   0439 8B 83              1143 	mov	dph,r3
   043B 8C F0              1144 	mov	b,r4
   043D 12s00r82           1145 	lcall	_clcd_put_string
                           1146 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:32: clcd_set_cursor(1,0);
   0440 E4                 1147 	clr	a
   0441 C0 E0              1148 	push	acc
   0443 C0 E0              1149 	push	acc
   0445 90 00 01           1150 	mov	dptr,#0x0001
   0448 12s00r44           1151 	lcall	_clcd_set_cursor
   044B 15 81              1152 	dec	sp
   044D 15 81              1153 	dec	sp
                           1154 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:33: clcd_put_byte(12);clcd_put_string("h * ");clcd_put_byte(34);clcd_put_string("h = ");clcd_put_integer(12*34);
   044F 75 82 0C           1155 	mov	dpl,#0x0C
   0452 12s00rAD           1156 	lcall	_clcd_put_byte
   0455 90s00r22           1157 	mov	dptr,#__str_2
   0458 75 F0 80           1158 	mov	b,#0x80
   045B 12s00r82           1159 	lcall	_clcd_put_string
   045E 75 82 22           1160 	mov	dpl,#0x22
   0461 12s00rAD           1161 	lcall	_clcd_put_byte
   0464 90s00r27           1162 	mov	dptr,#__str_3
   0467 75 F0 80           1163 	mov	b,#0x80
   046A 12s00r82           1164 	lcall	_clcd_put_string
   046D 90 01 98           1165 	mov	dptr,#0x0198
   0470 12s02rBC           1166 	lcall	_clcd_put_integer
                           1167 ;	C:\Users\dht98\DOWNLO~1\NKUST\NKUST_~2\HW16\clcd-ex.c:34: while(1==1);
   0473                    1168 00102$:
   0473 80 FE              1169 	sjmp	00102$
   0475 85*00 81           1170 	mov	sp,_bp
   0478 D0*00              1171 	pop	_bp
   047A 22                 1172 	ret
                           1173 	.area CSEG    (CODE)
                           1174 	.area CONST   (CODE)
   0000                    1175 _ASCII:
   0000 30 31 32 33 34 35  1176 	.ascii "0123456789ABCDEF"
        36 37 38 39 41 42
        43 44 45 46
   0010 00                 1177 	.db 0x00
   0011                    1178 __str_1:
   0011 43 68 69 6E 2D 53  1179 	.ascii "Chin-Shiuh Shieh"
        68 69 75 68 20 53
        68 69 65 68
   0021 00                 1180 	.db 0x00
   0022                    1181 __str_2:
   0022 68 20 2A 20        1182 	.ascii "h * "
   0026 00                 1183 	.db 0x00
   0027                    1184 __str_3:
   0027 68 20 3D 20        1185 	.ascii "h = "
   002B 00                 1186 	.db 0x00
                           1187 	.area XINIT   (CODE)
                           1188 	.area CABS    (ABS,CODE)
